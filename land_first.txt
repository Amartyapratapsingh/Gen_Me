package com.example.genme

import androidx.compose.animation.core.*
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.interaction.collectIsPressedAsState
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.Create
import androidx.compose.material.icons.filled.Face
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.*
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.WindowInsetsSides
import androidx.compose.foundation.layout.only
import androidx.compose.foundation.layout.windowInsetsPadding
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.*
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.geometry.CornerRadius
import androidx.compose.ui.graphics.*
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.drawscope.rotate
import androidx.compose.ui.graphics.drawscope.drawIntoCanvas
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.graphics.Shadow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.genme.ui.FuturisticBottomNav
import com.example.genme.ui.HtmlStyleBottomNav
import com.example.genme.R
import coil.compose.AsyncImage
import kotlin.math.*
import kotlin.random.Random

@Composable
fun LandingPage(navController: NavController) {
    val bg = Color(0xFF0D0D1A)
    val borderBrush = Brush.linearGradient(
        colors = listOf(Color(0xFF00B8FF), Color(0xFF8338EC), Color(0xFF00F5D4))
    )

    Box(modifier = Modifier.fillMaxSize().background(bg)) {
        // Soft top glow
    Box(
        modifier = Modifier
                .fillMaxWidth()
                .height(240.dp)
            .background(
                    Brush.linearGradient(
                        listOf(Color(0x3300B8FF), Color(0x338338EC), Color(0x3300F5D4))
                    )
                )
                .align(Alignment.TopCenter)
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .windowInsetsPadding(
                    WindowInsets.safeDrawing.only(WindowInsetsSides.Top + WindowInsetsSides.Bottom)
                )
        ) {
            Column(
                modifier = Modifier
                    .weight(1f)
                    .verticalScroll(rememberScrollState())
            ) {
                TopHeader(onSettings = { navController.navigate("settings") })
                SearchBar()
                FeatureCarousel(
                    onOutfits = { navController.navigate("clothes_change") },
                    onHairstyle = { navController.navigate("hairstyle_change") },
                    onAvatars = { navController.navigate("ghibli_art") },
                    borderBrush = borderBrush
                )
                Text(
                    text = "Tools",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)
                )
                ToolsGrid(
                    borderBrush = borderBrush,
                    onCloth = { navController.navigate("clothes_change") },
                    onHair = { navController.navigate("hairstyle_change") },
                    onBackground = { navController.navigate("gallery") },
                    onAvatar = { navController.navigate("profile") },
                    onFilters = { navController.navigate("gallery") },
                    onFaceGen = { navController.navigate("ghibli_art") }
                )
                Spacer(Modifier.height(12.dp))
            }
            // Bottom nav provided by MainActivity Scaffold
        }
    }
}

@Composable
private fun TopHeader(onSettings: () -> Unit) {
    Row(
        modifier = Modifier.fillMaxWidth().padding(horizontal = 12.dp, vertical = 8.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Spacer(Modifier.width(48.dp))
        Text(
            text = "Gen ME",
            color = Color.White,
            fontWeight = FontWeight.Bold,
            fontSize = 20.sp,
            textAlign = TextAlign.Center,
            modifier = Modifier.weight(1f).padding(horizontal = 8.dp)
        )
        IconButton(onClick = onSettings, modifier = Modifier.size(40.dp)) {
            Icon(imageVector = Icons.Filled.Settings, contentDescription = "Settings", tint = Color.White)
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun SearchBar() {
    val query = remember { mutableStateOf("") }
    Row(modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp, vertical = 8.dp)) {
        OutlinedTextField(
            value = query.value,
            onValueChange = { query.value = it },
            singleLine = true,
            placeholder = { Text("Search", color = Color.White.copy(0.5f)) },
            leadingIcon = { Icon(imageVector = Icons.Filled.Search, contentDescription = null, tint = Color.White.copy(0.5f)) },
            modifier = Modifier.fillMaxWidth(),
            colors = OutlinedTextFieldDefaults.colors(
                focusedTextColor = Color.White,
                unfocusedTextColor = Color.White,
                focusedBorderColor = Color(0xFF8338EC),
                unfocusedBorderColor = Color.Transparent,
                focusedContainerColor = Color(0x991A1A2E),
                unfocusedContainerColor = Color(0x991A1A2E),
                cursorColor = Color(0xFF8338EC)
            ),
            shape = RoundedCornerShape(12.dp)
        )
    }
}

@Composable
private fun FeatureCarousel(
    onOutfits: () -> Unit,
    onHairstyle: () -> Unit,
    onAvatars: () -> Unit,
    borderBrush: Brush
) {
    val cardShape = RoundedCornerShape(16.dp)
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .horizontalScroll(rememberScrollState())
            .padding(horizontal = 16.dp, vertical = 8.dp),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
        FeatureCard(
            imageUrl = "https://lh3.googleusercontent.com/aida-public/AB6AXuCHH3qXllSi35moGGMaAiou98gfqQRu72-6ZjKpzZWx1wd-_e-mWMmgAl1MxR3tRCyoIVs6jKmnBrcIow9Aau0PSd5k5XbBN9swpq9BL0xYkttrJmhFTJ-kaLaexXfQiPRWi3RBW32bOVrymSNcAowBNKotTz7JCASSJIX9Lj0WJ53NHXbyioJCOip2wN-8dqsspGF_UtIITgOm3zmP90mUwTTfWRT_cr8zcm2Wbl2XtjMTVQO4T_ELU-2Q2Wf7zxUqCU2INXOvAcI",
            label = "Try New Outfits",
            onClick = onOutfits,
            shape = cardShape,
            borderBrush = borderBrush
        )
        FeatureCard(
            imageUrl = "https://lh3.googleusercontent.com/aida-public/AB6AXuDK8W95m5h3SoRf0HLmmoeyLyUb5xIaCPEIaKz67cIvyPn-oVM-99rNUGtOMhO5alcmEKCENlFx4GYkor5dMosqnuIPbfz3f2a0ql1ucy2mxJpYSuPZ-P81_4EJXbEGq_X6aCsvj3bm_Go96djdon29ABHQMmbxrVIWRbysawbEOe1hZ9c-NAKsEi2XMv7FdRXtCmRZ17TJ-dxnlgOs1kaGGpXsczRjETkAfFNKa0Wd80aLdeayBewMS2ciDtyS8Ftq4IyD5VWKLUY",
            label = "Change Hairstyle",
            onClick = onHairstyle,
            shape = cardShape,
            borderBrush = borderBrush
        )
        FeatureCard(
            imageUrl = "https://lh3.googleusercontent.com/aida-public/AB6AXuDv-X7tNMvyTWEJs1Q7VofyWJkKRThqTKsMSGl4qffzU1Ds4Cu4EKY8wPTTK6WKwhACZlEFkH5gB6VF_pbXPsTvj-LVUFJhGt94RgjTTUdSfAGTmnBf9gpFDpUbnMBgRPgK2LBlfJBTvNq9nI4U7BMdB6M_e7GOkV-g5WQnNsJj8XC65oIY0SgUVtGmBIQKxwqyZNf-CvZk5tAp7TZ1cjis8u7qhCHCtRGbduPVsuMMMZvMPT-1Ko9CoeoixXIicXUVDP7E7Dz8Uc4",
            label = "Generate AI Avatars",
            onClick = onAvatars,
            shape = cardShape,
            borderBrush = borderBrush
        )
    }
}

@Composable
private fun FeatureCard(
    imageUrl: String,
    label: String,
    onClick: () -> Unit,
    shape: RoundedCornerShape,
    borderBrush: Brush
